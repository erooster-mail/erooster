use erooster_deps::{
    color_eyre::section::PanicMessage,
    owo_colors::OwoColorize,
    sys_info::{os_release, os_type},
    url::Url,
};
use std::{fmt, panic::Location};

/// An custom panic handler for erooster
pub struct EroosterPanicMessage;

const VERSION: &str = env!("CARGO_PKG_VERSION");

impl PanicMessage for EroosterPanicMessage {
    fn display(&self, pi: &std::panic::PanicInfo<'_>, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        writeln!(f, "{}", "The application panicked (crashed).".red())?;

        // Print panic message.
        let payload = pi
            .payload()
            .downcast_ref::<String>()
            .map(String::as_str)
            .or_else(|| pi.payload().downcast_ref::<&str>().copied())
            .unwrap_or("<non string panic payload>");

        write!(f, "Message:  ")?;
        writeln!(f, "{}", payload.cyan())?;

        // If known, print panic location.
        write!(f, "Location: ")?;
        if let Some(loc) = pi.location() {
            write!(f, "{}", loc.file().purple())?;
            write!(f, ":")?;
            write!(f, "{}", loc.line().purple())?;

            write!(
                f,
                "\n\nConsider reporting the bug using this URL: {}",
                custom_url(loc, payload).cyan()
            )?;
        } else {
            write!(f, "<unknown>")?;
        }

        Ok(())
    }
}

fn custom_url(location: &Location<'_>, message: &str) -> impl fmt::Display {
    let url_result = Url::parse_with_params(
        "https://github.com/MTRNord/erooster/issues/new",
        &[
            ("title", "<autogenerated-issue>"),
            (
                "body",
                format!(
                    "## Metadata
|key|value|
|--|--|
|**version**|{}|
|**git commit**|{}|
|**os_type**|{}|
|**os_release**|{}|
|**message**|{}|
|**location**|{}|
## More info
",
                    VERSION,
                    option_env!("VERGEN_GIT_SHA_SHORT")
                        .or_else(|| Some("unknown"))
                        .expect("Failed to get git commit or fallback"),
                    os_type().unwrap_or_else(|_| "unavailable".to_string()),
                    os_release().unwrap_or_else(|_| "unavailable".to_string()),
                    message,
                    location,
                )
                .as_str(),
            ),
        ],
    );
    match &url_result {
        Ok(url_struct) => format!("{url_struct}"),
        Err(_e) => String::from("https://github.com/MTRNord/erooster/issues/new"),
    }
}
